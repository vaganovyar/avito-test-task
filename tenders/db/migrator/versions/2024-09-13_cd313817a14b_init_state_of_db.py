"""init state of db

Revision ID: cd313817a14b
Revises: 
Create Date: 2024-09-13 15:58:57.772501

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = "cd313817a14b"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tender",
        sa.Column("id", sa.UUID(), server_default=sa.text("uuid_generate_v4()"), nullable=False),
        sa.Column("organization_id", sa.UUID(), nullable=True),
        sa.Column("status", sa.Enum("CREATED", "PUBLISHED", "CLOSED", name="tenderstatus"), nullable=True),
        sa.Column("creator_id", sa.UUID(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.ForeignKeyConstraint(["creator_id"], ["employee.id"], name=op.f("fk__tender__creator_id__employee")),
        sa.ForeignKeyConstraint(
            ["organization_id"], ["organization.id"], name=op.f("fk__tender__organization_id__organization")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__tender")),
    )
    op.create_table(
        "bid",
        sa.Column("id", sa.UUID(), server_default=sa.text("uuid_generate_v4()"), nullable=False),
        sa.Column("tender_id", sa.UUID(), nullable=True),
        sa.Column("status", sa.Enum("CREATED", "PUBLISHED", "CANCELED", name="bidstatus"), nullable=True),
        sa.Column("creator_type", sa.Enum("ORGANIZATION", "USER", name="creatortype"), nullable=True),
        sa.Column("creator_id", sa.UUID(), nullable=True),
        sa.Column("approved_num", sa.INTEGER(), server_default=sa.text("0"), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.ForeignKeyConstraint(["tender_id"], ["tender.id"], name=op.f("fk__bid__tender_id__tender")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__bid")),
    )
    op.create_table(
        "tender_history",
        sa.Column("id", sa.UUID(), server_default=sa.text("uuid_generate_v4()"), nullable=False),
        sa.Column("tender_id", sa.UUID(), nullable=True),
        sa.Column("name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column(
            "service_type", sa.Enum("CONSTRUCTION", "DELIVERY", "MANUFACTURE", name="servicetype"), nullable=True
        ),
        sa.Column("history_number", sa.INTEGER(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.ForeignKeyConstraint(["tender_id"], ["tender.id"], name=op.f("fk__tender_history__tender_id__tender")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__tender_history")),
    )
    op.create_table(
        "bid_history",
        sa.Column("id", sa.UUID(), server_default=sa.text("uuid_generate_v4()"), nullable=False),
        sa.Column("bid_id", sa.UUID(), nullable=True),
        sa.Column("name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("history_number", sa.INTEGER(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.ForeignKeyConstraint(["bid_id"], ["bid.id"], name=op.f("fk__bid_history__bid_id__bid")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__bid_history")),
    )
    op.create_table(
        "feedback",
        sa.Column("id", sa.UUID(), server_default=sa.text("uuid_generate_v4()"), nullable=False),
        sa.Column("bid_id", sa.UUID(), nullable=True),
        sa.Column("creator_id", sa.UUID(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.ForeignKeyConstraint(["bid_id"], ["bid.id"], name=op.f("fk__feedback__bid_id__bid")),
        sa.ForeignKeyConstraint(["creator_id"], ["employee.id"], name=op.f("fk__feedback__creator_id__employee")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__feedback")),
    )
    op.create_table(
        "feedback_history",
        sa.Column("id", sa.UUID(), server_default=sa.text("uuid_generate_v4()"), nullable=False),
        sa.Column("feedback_id", sa.UUID(), nullable=True),
        sa.Column("description", sa.TEXT(), nullable=True),
        sa.Column("history_number", sa.INTEGER(), nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("updated_at", postgresql.TIMESTAMP(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.ForeignKeyConstraint(
            ["feedback_id"], ["feedback.id"], name=op.f("fk__feedback_history__feedback_id__feedback")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__feedback_history")),
    )
    op.drop_constraint("employee_username_key", "employee", type_="unique")
    op.create_unique_constraint(op.f("uq__employee__username"), "employee", ["username"])
    op.drop_constraint("organization_responsible_organization_id_fkey", "organization_responsible", type_="foreignkey")
    op.drop_constraint("organization_responsible_user_id_fkey", "organization_responsible", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk__organization_responsible__user_id__employee"),
        "organization_responsible",
        "employee",
        ["user_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("fk__organization_responsible__organization_id__organization"),
        "organization_responsible",
        "organization",
        ["organization_id"],
        ["id"],
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk__organization_responsible__organization_id__organization"),
        "organization_responsible",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk__organization_responsible__user_id__employee"), "organization_responsible", type_="foreignkey"
    )
    op.create_foreign_key(
        "organization_responsible_user_id_fkey",
        "organization_responsible",
        "employee",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        "organization_responsible_organization_id_fkey",
        "organization_responsible",
        "organization",
        ["organization_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(op.f("uq__employee__username"), "employee", type_="unique")
    op.create_unique_constraint("employee_username_key", "employee", ["username"])
    op.drop_table("feedback_history")
    op.drop_table("feedback")
    op.drop_table("bid_history")
    op.drop_table("tender_history")
    op.drop_table("bid")
    op.drop_table("tender")
    # ### end Alembic commands ###
